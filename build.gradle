plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.1'
	id 'io.spring.dependency-management' version '1.1.0'
	id "org.sonarqube" version "4.2.1.3168"
	id 'jacoco'
	id 'com.diffplug.spotless' version '6.11.0'
}

group = 'everymeal'
version = '0.0.1-SNAPSHOT'

sonar {
	properties {
		property "sonar.projectKey", "everymeals_EveryMeal_Server"
		property "sonar.organization", "everymeals"
		property "sonar.host.url", "https://sonarcloud.io"
		property 'sonar.sources', 'src'
		property 'sonar.language', 'java'
		property 'sonar.sourceEncoding', 'UTF-8'
		property("sonar.test.inclusions", "**/*Test.java")
		property "sonar.exclusions", "**/test/**, **/*Application*.java, **/dto/**, **/entity/**, **/*Exception*.java, **/*RepositoryImpl.java, **/global/**, **/resources/**, **/*Dao*.java, **/dev/**, **/admin/**"
		property "sonar.java.coveragePlugin", "jacoco"
		property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'
	}
}

spotless {
	java{
		target("**/*.java")
		googleJavaFormat().aosp()
		importOrder()
		removeUnusedImports()
		trimTrailingWhitespace()
		endWithNewline()
	}
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	//logging
	implementation 'org.springframework.boot:spring-boot-starter-logging'

	//lombok
	implementation('org.projectlombok:lombok')
	annotationProcessor 'org.projectlombok:lombok'

	//Validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	//Webflux
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	//MySQL
	implementation 'mysql:mysql-connector-java:8.0.28'

	//테스트용 H2
	implementation 'com.h2database:h2'

	//Spring Data JPA
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.hibernate.orm:hibernate-core:6.2.5.Final'

	//QueryDSL
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	//SWAGGER
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	//JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	//STMP
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	//AWS S3
	implementation 'software.amazon.awssdk:s3:2.20.68'
	implementation 'com.amazonaws:aws-java-sdk-s3:1.12.561'

	//Mybatis
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.2'

}

tasks.named('test') {
	useJUnitPlatform()
	outputs.dir snippetsDir
	finalizedBy 'jacocoTestReport'
}
ext {
	snippetsDir = file('build/generated-snippets')
}
jacocoTestReport {
	reports {
		xml.required = true
		html.required = true
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"**/*Application*",
					"**/config/*",
					"**/entity/**",
					"**/dto/**",
					"**/exception/**",
					"**/repository/**",
					"**/global/*",
					"**/*Dao*",
					"**/dev/**",
					"**/admin/**",
			])
		}))
	}

	finalizedBy 'jacocoTestCoverageVerification'
}
jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true // rule을 on/off
			element = "CLASS" // class 단위로 rule 체크
			limit { // 라인 커버리지 최소 80% 충족
				counter = "LINE"
				value = "COVEREDRATIO"
				minimum = "0.80".toBigDecimal()
			}
			limit {// 빈 줄 제외한 코드 라인수 최대 1000라인으로 제한한다.
				counter = "LINE"
				value = "TOTALCOUNT"
				maximum = "1000.0".toBigDecimal()
			}
		}
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"**/*Application*",
					"**/config/*",
					"**/entity/**",
					"**/dto/**",
					"**/exception/**",
					"**/repository/**",
					"**/global/*",
					"**/*Dao*",
					"**/dev/**",
					"**/admin/**",
			])
		}))
	}
}

// === ⭐ QueryDsl 빌드 옵션 (선택) ===
def querydslDir = "$buildDir/generated/querydsl"

sourceSets {
	main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
	options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

clean.doLast {
	file(querydslDir).deleteDir()
}