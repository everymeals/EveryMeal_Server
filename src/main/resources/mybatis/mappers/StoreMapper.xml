<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="everymeal.server.store.repository.StoreMapper">


  <select id="getStores" resultType="java.util.Map">
    SELECT *
    FROM (
    SELECT
      s.idx as 'idx',
      s.name as 'name',
      s.address as 'address',
      s.phone as 'phoneNumber',
      s.category_detail as 'categoryDetail',
      s.distance as 'distance',
      s.grade as 'grade',
      s.review_count as 'reviewCount',
      s.recommended_count as 'recommendedCount',
      GROUP_CONCAT(i.image_url SEPARATOR ',') AS 'images',
      IF(
          (
            SELECT COUNT(*)
            FROM likes
            WHERE user_idx = #{userIdx}
              AND store_idx = s.idx
          ) = 0,
          false,
          true
        ) AS 'isLiked'
    FROM
      store s
    LEFT JOIN reviews r ON s.idx = r.store_idx AND r.is_deleted = false
    LEFT JOIN images i ON r.idx = i.review_idx AND i.is_deleted = false
    WHERE
      s.university_idx = #{universityIdx}
      AND s.is_deleted = FALSE
      AND (
      CASE
        WHEN #{group} = 'recommend' THEN s.recommended_count > 0
        WHEN #{group} = 'restaurant' THEN s.category_detail IN ('한식', '중식', '일식', '양식')
        WHEN #{group} = 'cafe' THEN s.category_detail IN ('카페', '디저트')
        WHEN #{group} = 'bar' THEN s.category_detail = '술집'
        WHEN #{group} = 'etc' THEN s.category_detail IN ('기타', '패스트푸드', '분식')
        WHEN #{group} = 'all' THEN 1=1
        WHEN #{group} = 'korean' THEN s.category_detail = '한식'
        WHEN #{group} = 'chinese' THEN s.category_detail = '중식'
        WHEN #{group} = 'japanese' THEN s.category_detail = '일식'
        WHEN #{group} = 'western' THEN s.category_detail = '양식'
        ELSE s.category_detail IN ('한식', '중식', '일식', '양식', '카페', '디저트', '술집', '기타', '패스트푸드', '분식')
        END
      )
      AND (
      CASE
        WHEN #{grade} = 1 THEN s.grade BETWEEN 0 AND 1
        WHEN #{grade} = 2 THEN s.grade BETWEEN 1 AND 2
        WHEN #{grade} = 3 THEN s.grade BETWEEN 2 AND 3
        WHEN #{grade} = 4 THEN s.grade BETWEEN 3 AND 4
        WHEN #{grade} = 5 THEN s.grade BETWEEN 4 AND 5
        ELSE s.grade BETWEEN 0 AND 5
        END
      )
    GROUP BY s.idx, s.name, s.address, s.phone, s.category_detail, s.distance, s.grade, s.review_count, s.recommended_count
    ORDER BY
      CASE #{order}
        WHEN 'name' THEN s.name
        WHEN 'distance' THEN s.distance
        WHEN 'recommendedCount' THEN s.recommended_count
        WHEN 'reviewCount' THEN s.review_count
        WHEN 'grade' THEN s.grade
        WHEN 'registDate' THEN s.created_at
        ELSE s.idx
        END DESC
         ) a
      LIMIT #{limit}
    OFFSET #{offset}
  </select>

  <select id="getStoreCount" resultType="java.lang.Long">
    SELECT COUNT(*) AS total
    FROM (
        SELECT
            s.idx as 'idx',
            s.name as 'name',
            s.address as 'address',
            s.phone as 'phoneNumber',
            s.category_detail as 'categoryDetail',
            s.distance as 'distance',
            s.grade as 'grade',
            s.review_count as 'reviewCount',
            s.recommended_count as 'recommendedCount',
            GROUP_CONCAT(i.image_url SEPARATOR ' ') AS 'images',
            IF(
                (
                  SELECT COUNT(*)
                  FROM likes
                  WHERE user_idx = #{userIdx}
                    AND store_idx = s.idx
                ) = 0,
                false,
                true
              ) AS 'isLiked'
    FROM
      store s
        LEFT JOIN reviews r ON s.idx = r.store_idx AND r.is_deleted = false
        LEFT JOIN images i ON r.idx = i.review_idx AND i.is_deleted = false
    WHERE
      s.university_idx = #{universityIdx}
      AND s.is_deleted = FALSE
      AND (
      CASE
        WHEN #{group} = 'recommend' THEN s.recommended_count > 0
        WHEN #{group} = 'restaurant' THEN s.category_detail IN ('한식', '중식', '일식', '양식')
        WHEN #{group} = 'cafe' THEN s.category_detail IN ('카페', '디저트')
        WHEN #{group} = 'bar' THEN s.category_detail = '술집'
        WHEN #{group} = 'all' THEN 1=1
        ELSE s.category_detail IN ('한식', '중식', '일식', '양식', '카페', '디저트', '술집', '기타', '패스트푸드', '분식')
        END
      )
      AND (
      CASE
        WHEN #{grade} = 1 THEN s.grade BETWEEN 0 AND 1
        WHEN #{grade} = 2 THEN s.grade BETWEEN 1 AND 2
        WHEN #{grade} = 3 THEN s.grade BETWEEN 2 AND 3
        WHEN #{grade} = 4 THEN s.grade BETWEEN 3 AND 4
        WHEN #{grade} = 5 THEN s.grade BETWEEN 4 AND 5
        ELSE s.grade BETWEEN 0 AND 5
        END
      )
    GROUP BY s.idx, s.name, s.address, s.phone, s.category_detail, s.distance, s.grade, s.review_count, s.recommended_count
    ORDER BY
      CASE #{order}
        WHEN 'name' THEN s.name
        WHEN 'distance' THEN s.distance
        WHEN 'recommendedCount' THEN s.recommended_count
        WHEN 'reviewCount' THEN s.review_count
        WHEN 'grade' THEN s.grade
        WHEN 'registDate' THEN s.created_at
        ELSE s.idx
        END DESC
         ) total
  </select>

  <select id="getUserLikesStore" resultType="java.util.Map">
    SELECT *
    FROM (
      SELECT
      s.idx as 'idx',
      s.name as 'name',
      s.address as 'address',
      s.phone as 'phoneNumber',
      s.category_detail as 'categoryDetail',
      s.distance as 'distance',
      s.grade as 'grade',
      s.review_count as 'reviewCount',
      s.recommended_count as 'recommendedCount',
      GROUP_CONCAT(i.image_url SEPARATOR ',') AS 'images',
      true AS 'isLiked' ,
      COUNT(DISTINCT l.idx) AS 'userLikesCount'
    FROM
      store s
        LEFT JOIN
      reviews r ON s.idx = r.store_idx AND r.is_deleted = false
        LEFT JOIN
      images i ON r.idx = i.review_idx AND i.is_deleted = false
        JOIN
      likes l ON s.idx = l.store_idx
    WHERE
      l.user_idx = #{userIdx}
      AND s.university_idx = #{universityIdx}
      AND s.is_deleted = FALSE
      AND (
      CASE
        WHEN #{group} = 'recommend' THEN s.recommended_count > 0
        WHEN #{group} = 'restaurant' THEN s.category_detail IN ('한식', '중식', '일식', '양식')
        WHEN #{group} = 'cafe' THEN s.category_detail IN ('카페', '디저트')
        WHEN #{group} = 'bar' THEN s.category_detail = '술집'
        WHEN #{group} = 'all' THEN 1=1
        ELSE s.category_detail IN ('한식', '중식', '일식', '양식', '카페', '디저트', '술집', '기타', '패스트푸드', '분식')
        END
      )
      AND (
      CASE
        WHEN #{grade} = 1 THEN s.grade BETWEEN 0 AND 1
        WHEN #{grade} = 2 THEN s.grade BETWEEN 1 AND 2
        WHEN #{grade} = 3 THEN s.grade BETWEEN 2 AND 3
        WHEN #{grade} = 4 THEN s.grade BETWEEN 3 AND 4
        WHEN #{grade} = 5 THEN s.grade BETWEEN 4 AND 5
        ELSE s.grade BETWEEN 0 AND 5
        END
      )
    GROUP BY
      s.idx, s.name, s.address, s.phone, s.category_detail, s.distance, s.grade, s.review_count, s.recommended_count
    ORDER BY
      CASE #{order}
        WHEN 'name' THEN s.name
        WHEN 'distance' THEN s.distance
        WHEN 'recommendedCount' THEN s.recommended_count
        WHEN 'reviewCount' THEN s.review_count
        WHEN 'grade' THEN s.grade
        WHEN 'registDate' THEN s.created_at
        ELSE s.idx
        END DESC
      ) a
      LIMIT #{limit}
    OFFSET #{offset}
  </select>
  <select id="getUserLikesStoreCount" resultType="java.lang.Long">
    SELECT
      COUNT(*) AS total
    FROM (
    SELECT
      s.idx
    FROM
      store s
        LEFT JOIN
      reviews r ON s.idx = r.store_idx AND r.is_deleted = false
        LEFT JOIN
      images i ON r.idx = i.review_idx AND i.is_deleted = false
        JOIN
      likes l ON s.idx = l.store_idx
    WHERE
      l.user_idx = #{userIdx}
      AND s.university_idx = #{universityIdx}
      AND s.is_deleted = FALSE
      AND (
      CASE
        WHEN #{group} = 'recommend' THEN s.recommended_count > 0
        WHEN #{group} = 'restaurant' THEN s.category_detail IN ('한식', '중식', '일식', '양식')
        WHEN #{group} = 'cafe' THEN s.category_detail IN ('카페', '디저트')
        WHEN #{group} = 'bar' THEN s.category_detail = '술집'
        WHEN #{group} = 'all' THEN 1=1
        ELSE s.category_detail IN ('한식', '중식', '일식', '양식', '카페', '디저트', '술집', '기타', '패스트푸드', '분식')
        END
      )
      AND (
      CASE
        WHEN #{grade} = 1 THEN s.grade BETWEEN 0 AND 1
        WHEN #{grade} = 2 THEN s.grade BETWEEN 1 AND 2
        WHEN #{grade} = 3 THEN s.grade BETWEEN 2 AND 3
        WHEN #{grade} = 4 THEN s.grade BETWEEN 3 AND 4
        WHEN #{grade} = 5 THEN s.grade BETWEEN 4 AND 5
        ELSE s.grade BETWEEN 0 AND 5
        END
      )
    GROUP BY
      s.idx, s.name, s.address, s.phone, s.category_detail, s.distance, s.grade, s.review_count, s.recommended_count
    ORDER BY
      CASE #{order}
        WHEN 'name' THEN s.name
        WHEN 'distance' THEN s.distance
        WHEN 'recommendedCount' THEN s.recommended_count
        WHEN 'reviewCount' THEN s.review_count
        WHEN 'grade' THEN s.grade
        WHEN 'registDate' THEN s.created_at
        ELSE s.idx
        END DESC
      ) total
  </select>

  <sql id="paging">
    SELECT
      s.idx as 'idx',
      s.name as 'name',
      s.address as 'address',
      s.phone as 'phoneNumber',
      s.category_detail as 'categoryDetail',
      s.distance as 'distance',
      s.grade as 'grade',
      s.review_count as 'reviewCount',
      s.recommended_count as 'recommendedCount',
      GROUP_CONCAT(i.image_url SEPARATOR ',') AS 'images',
      IF(
          (
            SELECT COUNT(*)
            FROM likes
            WHERE user_idx = #{userIdx}
              AND store_idx = s.idx
          ) = 0,
          false,
          true
        ) AS 'isLiked'
    FROM
      store s
        LEFT JOIN reviews r ON s.idx = r.store_idx AND r.is_deleted = false
        LEFT JOIN images i ON r.idx = i.review_idx AND i.is_deleted = false
    WHERE
      s.university_idx = #{universityIdx}
      AND s.is_deleted = FALSE
    GROUP BY s.idx, s.name, s.address, s.phone, s.category_detail, s.distance, s.grade, s.review_count, s.recommended_count
  </sql>

  <select id="getStoresKeyword" parameterType="Map" resultType="Map">
    <include refid="everymeal.server.PagingMapper.Paging" />
    <include refid="pageGetStoresKeyword" />
    <include refid="everymeal.server.PagingMapper.PagingEnd" />
  </select>

  <select id="getStoresKeywordCnt" parameterType="Map" resultType="Long">
    <include refid="everymeal.server.PagingMapper.PagingCount" />
    <include refid="pageGetStoresKeyword" />
    <include refid="everymeal.server.PagingMapper.PagingCountEnd" />
  </select>

  <select id="getStoreReview" resultType="java.util.Map">
    <include refid="everymeal.server.PagingMapper.Paging" />
    <include refid="getStoreReviewSQL" />
    <include refid="everymeal.server.PagingMapper.PagingEnd" />
  </select>

  <select id="getStoreReviewCnt" resultType="java.lang.Long">
    <include refid="everymeal.server.PagingMapper.PagingCount" />
    <include refid="getStoreReviewSQL" />
    <include refid="everymeal.server.PagingMapper.PagingCountEnd" />
  </select>

  <select id="getStoresReviews" resultType="java.util.Map">
    <include refid="everymeal.server.PagingMapper.Paging" />
    <include refid="getStoresReviewsSQL" />
    <include refid="everymeal.server.PagingMapper.PagingEnd" />
  </select>

  <select id="getStoresReviewsCnt" resultType="java.lang.Long">
    <include refid="everymeal.server.PagingMapper.PagingCount" />
    <include refid="getStoresReviewsSQL" />
    <include refid="everymeal.server.PagingMapper.PagingCountEnd" />
  </select>

  <sql id="getStoresReviewsSQL">
    select r.idx as 'reviewIdx',
           r.content as 'content',
           r.grade as 'grade',
           r.created_at as 'createdAt',
           u.nickname as 'nickname',
           u.profile_img_url as 'profileImgUrl',
           (select count(*)
            from review_marks rm
            where r.idx = rm.review_idx) as 'reviewMarksCnt',
           GROUP_CONCAT(i.image_url SEPARATOR ',') AS 'images',
            s.idx as 'storeIdx',
           s.name as 'storeName'
    from reviews r
           left join users u on r.user_idx = u.idx and u.is_deleted = false
           left join images i on r.idx = i.review_idx and i.is_deleted = false
           left join store s on r.store_idx = s.idx and s.is_deleted = false
           left join university un on s.university_idx = #{campusIdx} and un.is_deleted = false
    where CASE
            WHEN #{group} = 'recommend' THEN s.recommended_count > 0
            WHEN #{group} = 'restaurant' THEN s.category_detail IN ('한식', '중식', '일식', '양식')
            WHEN #{group} = 'cafe' THEN s.category_detail IN ('카페', '디저트')
            WHEN #{group} = 'bar' THEN s.category_detail = '술집'
            WHEN #{group} = 'all' THEN 1 = 1
            ELSE s.category_detail IN
                 ('한식', '중식', '일식', '양식', '카페', '디저트', '술집', '기타', '패스트푸드', '분식')
      END
      AND (
      CASE
        WHEN #{grade} = 1 THEN r.grade BETWEEN 0 AND 1
        WHEN #{grade} = 2 THEN r.grade BETWEEN 1 AND 2
        WHEN #{grade} = 3 THEN r.grade BETWEEN 2 AND 3
        WHEN #{grade} = 4 THEN r.grade BETWEEN 3 AND 4
        WHEN #{grade} = 5 THEN r.grade BETWEEN 4 AND 5
        ELSE r.grade BETWEEN 0 AND 5
        END
      )
    group by r.idx, s.idx, s.name, s.distance, s.recommended_count, s.review_count, s.grade, s.created_at
    ORDER BY CASE #{order}
               WHEN 'name' THEN s.name
               WHEN 'distance' THEN s.distance
               WHEN 'recommendedCount' THEN s.recommended_count
               WHEN 'reviewCount' THEN s.review_count
               WHEN 'grade' THEN s.grade
               WHEN 'registDate' THEN s.created_at
              WHEN 'reviewMarksCnt' THEN reviewMarksCnt
               ELSE s.created_at
               END DESC
  </sql>

  <sql id="getStoreReviewSQL">
    <![CDATA[
    SELECT
      r.idx as 'idx',
      r.content as 'content',
      r.grade as 'grade',
      r.created_at as 'createdAt',
      u.nickname as 'nickname',
      u.profile_img_url as 'profileImageUrl',
      s.recommended_count as 'recommendedCount',
      GROUP_CONCAT(i.image_url SEPARATOR ',') AS 'images'
    FROM
      reviews r
        JOIN
      users u ON r.user_idx = u.idx AND u.is_deleted = false
        LEFT JOIN
      images i ON r.idx = i.review_idx AND i.is_deleted = false
        LEFT JOIN
      store s ON r.store_idx = s.idx AND s.is_deleted = false
    WHERE
      r.store_idx = #{storeIdx}
        AND r.is_deleted = false
    GROUP BY r.idx, r.content, r.grade, r.created_at, u.nickname, u.profile_img_url
    ]]>
  </sql>

  <sql id="pageGetStoresKeyword">
  <![CDATA[
  SELECT
    s.idx as 'idx',
    s.name as 'name',
    s.address as 'address',
    s.phone as 'phoneNumber',
    s.category_detail as 'categoryDetail',
    s.distance as 'distance',
    s.grade as 'grade',
    s.review_count as 'reviewCount',
    s.recommended_count as 'recommendedCount',
    GROUP_CONCAT(i.image_url SEPARATOR ',') AS 'images',
    IF(
        (
          SELECT COUNT(*)
          FROM likes
          WHERE user_idx = #{userIdx}
            AND store_idx = s.idx
        ) = 0,
        false,
        true
      ) AS 'isLiked'
  FROM
    store s
      LEFT JOIN reviews r ON s.idx = r.store_idx AND r.is_deleted = false
      LEFT JOIN images i ON r.idx = i.review_idx AND i.is_deleted = false
  WHERE
    s.university_idx = #{universityIdx}
    AND s.is_deleted = FALSE
    AND (
        s.name LIKE CONCAT('%', #{keyword}, '%')
        OR s.category_detail LIKE CONCAT('%', #{keyword}, '%')
        )
  GROUP BY s.idx, s.name, s.address, s.phone, s.category_detail, s.distance, s.grade, s.review_count, s.recommended_count
  ]]>
  </sql>


</mapper>